name: ZeroTier+V2ray

# 注意事项：
# 1. 应当指定每个任务的持续时间和开始时间，例如设置 schedule.cron 属性让任务每个小时自动运行一次，每次运行时间 60分钟 （由 "Start V2ray" 中的 timeout-minutes 指定）
# 2. 应当确保 IP_ASSIGNMENT

on:
  workflow_dispatch:
  # 启用定时任务（每小时运行一次）
  schedule:
    - cron: "0 * * * *"  # 每小时的第0分钟执行

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 58  # 总任务超时时间，略小于60分钟
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # 更新到最新版本

      - name: Install ZeroTier
        run: |
          curl -s https://install.zerotier.com | sudo bash
          sudo zerotier-cli info

      - name: Start ZeroTier
        env:
          # 如果修改了 IP_ASSIGNMENT，那么对于 clash 配置的服务器地址也应当同步。
          IP_ASSIGNMENT: 192.168.196.254
          ZEROTIER_NETWORK_ID: ${{ secrets.ZEROTIER_NETWORK_ID }}
          ZEROTIER_TOKEN: ${{ secrets.ZEROTIER_TOKEN }}
        run: |
          memberId=$(sudo zerotier-cli info | awk -F" " '{print $3}')
          echo "Member Id is ${memberId}"
          
          # 加入网络
          sudo zerotier-cli join ${ZEROTIER_NETWORK_ID}
          sleep 10
          
          # 设置静态IP
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: token ${ZEROTIER_TOKEN}" \
            -d "{\"config\": { \"ipAssignments\": [ \"$IP_ASSIGNMENT\" ] }}" \
            https://api.zerotier.com/api/v1/network/${ZEROTIER_NETWORK_ID}/member/${memberId}
          
          # 等待IP分配
          echo "等待IP分配..."
          sleep 20
          
          # 检查网络状态
          sudo zerotier-cli listnetworks

      - name: Install Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y docker.io
          sudo systemctl start docker
          sudo systemctl enable docker

      - name: Start V2ray
        timeout-minutes: 55  # 略小于总超时时间，确保清理步骤能执行
        env:
          V2RAY_CONFIG_JSON: ${{ secrets.V2RAY_CONFIG_JSON }}
        run: |
          # 创建V2Ray配置文件
          echo '${{ secrets.V2RAY_CONFIG_JSON }}' > v2ray-runtime-config.json
          
          # 停止可能存在的旧容器
          sudo docker stop v2ray-container || true
          sudo docker rm v2ray-container || true
          
          # 启动V2Ray容器
          sudo docker run -d \
            --name v2ray-container \
            --network=host \
            --restart=unless-stopped \
            -v $(pwd)/v2ray-runtime-config.json:/etc/v2fly/config.json \
            v2fly/v2fly-core run -c /etc/v2fly/config.json
          
          # 等待服务启动
          sleep 10
          
          # 检查容器状态
          sudo docker ps
          echo "V2Ray服务已启动，运行中..."

      - name: Network Status Check
        run: |
          # 检查ZeroTier网络状态
          echo "=== ZeroTier网络状态 ==="
          sudo zerotier-cli listnetworks
          
          # 检查IP分配
          echo "=== 网络接口信息 ==="
          ip addr show | grep -A 5 zt
          
          # 测试连通性
          echo "=== 连通性测试 ==="
          ping -c 3 $IP_ASSIGNMENT || echo "Ping测试失败"

      - name: Keep Alive
        run: |
          # 保活脚本，维持服务运行
          echo "开始保活监控..."
          counter=0
          while [ $counter -lt 3300 ]; do  # 55分钟
            # 检查V2Ray容器状态
            if ! sudo docker ps | grep -q v2ray-container; then
              echo "V2Ray容器异常，尝试重启..."
              sudo docker start v2ray-container || sudo docker run -d \
                --name v2ray-container \
                --network=host \
                -v $(pwd)/v2ray-runtime-config.json:/etc/v2fly/config.json \
                v2fly/v2fly-core run -c /etc/v2fly/config.json
            fi
            
            # 检查ZeroTier连接
            if ! sudo zerotier-cli listnetworks | grep -q "OK"; then
              echo "ZeroTier连接异常，尝试重连..."
              sudo zerotier-cli join $ZEROTIER_NETWORK_ID
            fi
            
            counter=$((counter + 1))
            sleep 1
          done
          echo "保活周期结束"

      - name: Immediately Cleanup
        if: always()
        env:
          ZEROTIER_NETWORK_ID: ${{ secrets.ZEROTIER_NETWORK_ID }}
          ZEROTIER_TOKEN: ${{ secrets.ZEROTIER_TOKEN }}
        # https://docs.zerotier.com/central/v1/#operation/deleteNetworkMember
        run: |
          echo "执行清理操作..."
          
          # 停止Docker容器
          sudo docker stop v2ray-container || true
          sudo docker rm v2ray-container || true
          
          # 离开ZeroTier网络
          memberId=$(sudo zerotier-cli info | awk -F" " '{print $3}' 2>/dev/null) || true
          if [ ! -z "$memberId" ]; then
            curl -X DELETE \
              -H "Authorization: token ${ZEROTIER_TOKEN}" \
              https://api.zerotier.com/api/v1/network/${ZEROTIER_NETWORK_ID}/member/${memberId} || true
            sudo zerotier-cli leave ${ZEROTIER_NETWORK_ID} || true
          fi
          
          # 停止ZeroTier服务
          sudo systemctl stop zerotier-one || true
          echo "清理完成"
